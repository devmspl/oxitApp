//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 7 storyboards.
  struct storyboard {
    /// Storyboard `BottomTAB`.
    static let bottomTAB = _R.storyboard.bottomTAB()
    /// Storyboard `Common`.
    static let common = _R.storyboard.common()
    /// Storyboard `DeviceTree`.
    static let deviceTree = _R.storyboard.deviceTree()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Onboarding`.
    static let onboarding = _R.storyboard.onboarding()
    /// Storyboard `Settings`.
    static let settings = _R.storyboard.settings()
    /// Storyboard `Weather`.
    static let weather = _R.storyboard.weather()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "BottomTAB", bundle: ...)`
    static func bottomTAB(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.bottomTAB)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Common", bundle: ...)`
    static func common(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.common)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "DeviceTree", bundle: ...)`
    static func deviceTree(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.deviceTree)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Onboarding", bundle: ...)`
    static func onboarding(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.onboarding)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Settings", bundle: ...)`
    static func settings(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.settings)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Weather", bundle: ...)`
    static func weather(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.weather)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 12 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `calibarColor`.
    static let calibarColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "calibarColor")
    /// Color `clr_bg`.
    static let clr_bg = Rswift.ColorResource(bundle: R.hostingBundle, name: "clr_bg")
    /// Color `clr_dark_bg`.
    static let clr_dark_bg = Rswift.ColorResource(bundle: R.hostingBundle, name: "clr_dark_bg")
    /// Color `clr_light_bg`.
    static let clr_light_bg = Rswift.ColorResource(bundle: R.hostingBundle, name: "clr_light_bg")
    /// Color `clr_light_green`.
    static let clr_light_green = Rswift.ColorResource(bundle: R.hostingBundle, name: "clr_light_green")
    /// Color `clr_logout_bg`.
    static let clr_logout_bg = Rswift.ColorResource(bundle: R.hostingBundle, name: "clr_logout_bg")
    /// Color `clr_logout`.
    static let clr_logout = Rswift.ColorResource(bundle: R.hostingBundle, name: "clr_logout")
    /// Color `clr_readAlert`.
    static let clr_readAlert = Rswift.ColorResource(bundle: R.hostingBundle, name: "clr_readAlert")
    /// Color `clr_sidemenu_table`.
    static let clr_sidemenu_table = Rswift.ColorResource(bundle: R.hostingBundle, name: "clr_sidemenu_table")
    /// Color `grayTextColor`.
    static let grayTextColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "grayTextColor")
    /// Color `normalTextColor`.
    static let normalTextColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "normalTextColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "calibarColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func calibarColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.calibarColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "clr_bg", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func clr_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.clr_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "clr_dark_bg", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func clr_dark_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.clr_dark_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "clr_light_bg", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func clr_light_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.clr_light_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "clr_light_green", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func clr_light_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.clr_light_green, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "clr_logout", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func clr_logout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.clr_logout, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "clr_logout_bg", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func clr_logout_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.clr_logout_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "clr_readAlert", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func clr_readAlert(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.clr_readAlert, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "clr_sidemenu_table", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func clr_sidemenu_table(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.clr_sidemenu_table, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "grayTextColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func grayTextColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.grayTextColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "normalTextColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func normalTextColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.normalTextColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "calibarColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func calibarColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.calibarColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "clr_bg", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func clr_bg(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.clr_bg.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "clr_dark_bg", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func clr_dark_bg(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.clr_dark_bg.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "clr_light_bg", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func clr_light_bg(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.clr_light_bg.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "clr_light_green", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func clr_light_green(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.clr_light_green.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "clr_logout", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func clr_logout(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.clr_logout.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "clr_logout_bg", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func clr_logout_bg(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.clr_logout_bg.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "clr_readAlert", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func clr_readAlert(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.clr_readAlert.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "clr_sidemenu_table", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func clr_sidemenu_table(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.clr_sidemenu_table.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "grayTextColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func grayTextColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.grayTextColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "normalTextColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func normalTextColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.normalTextColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 21 files.
  struct file {
    /// Resource file `SF-Pro-Display-Black.otf`.
    static let sfProDisplayBlackOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-Black", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-BlackItalic.otf`.
    static let sfProDisplayBlackItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-BlackItalic", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-Bold.otf`.
    static let sfProDisplayBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-Bold", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-BoldItalic.otf`.
    static let sfProDisplayBoldItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-BoldItalic", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-Heavy.otf`.
    static let sfProDisplayHeavyOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-Heavy", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-HeavyItalic.otf`.
    static let sfProDisplayHeavyItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-HeavyItalic", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-Light.otf`.
    static let sfProDisplayLightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-Light", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-LightItalic.otf`.
    static let sfProDisplayLightItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-LightItalic", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-Medium.otf`.
    static let sfProDisplayMediumOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-Medium", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-MediumItalic.otf`.
    static let sfProDisplayMediumItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-MediumItalic", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-Regular.otf`.
    static let sfProDisplayRegularOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-Regular", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-RegularItalic.otf`.
    static let sfProDisplayRegularItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-RegularItalic", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-Semibold.otf`.
    static let sfProDisplaySemiboldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-Semibold", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-SemiboldItalic.otf`.
    static let sfProDisplaySemiboldItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-SemiboldItalic", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-Thin.otf`.
    static let sfProDisplayThinOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-Thin", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-ThinItalic.otf`.
    static let sfProDisplayThinItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-ThinItalic", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-Ultralight.otf`.
    static let sfProDisplayUltralightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-Ultralight", pathExtension: "otf")
    /// Resource file `SF-Pro-Display-UltralightItalic.otf`.
    static let sfProDisplayUltralightItalicOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SF-Pro-Display-UltralightItalic", pathExtension: "otf")
    /// Resource file `awsconfiguration.json`.
    static let awsconfigurationJson = Rswift.FileResource(bundle: R.hostingBundle, name: "awsconfiguration", pathExtension: "json")
    /// Resource file `heart.json`.
    static let heartJson = Rswift.FileResource(bundle: R.hostingBundle, name: "heart", pathExtension: "json")
    /// Resource file `tree.json`.
    static let treeJson = Rswift.FileResource(bundle: R.hostingBundle, name: "tree", pathExtension: "json")

    /// `bundle.url(forResource: "SF-Pro-Display-Black", withExtension: "otf")`
    static func sfProDisplayBlackOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayBlackOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Display-BlackItalic", withExtension: "otf")`
    static func sfProDisplayBlackItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayBlackItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Display-Bold", withExtension: "otf")`
    static func sfProDisplayBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Display-BoldItalic", withExtension: "otf")`
    static func sfProDisplayBoldItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayBoldItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Display-Heavy", withExtension: "otf")`
    static func sfProDisplayHeavyOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayHeavyOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Display-HeavyItalic", withExtension: "otf")`
    static func sfProDisplayHeavyItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayHeavyItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Display-Light", withExtension: "otf")`
    static func sfProDisplayLightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayLightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Display-LightItalic", withExtension: "otf")`
    static func sfProDisplayLightItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayLightItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Display-Medium", withExtension: "otf")`
    static func sfProDisplayMediumOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayMediumOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Display-MediumItalic", withExtension: "otf")`
    static func sfProDisplayMediumItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayMediumItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Display-Regular", withExtension: "otf")`
    static func sfProDisplayRegularOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayRegularOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Display-RegularItalic", withExtension: "otf")`
    static func sfProDisplayRegularItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayRegularItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Display-Semibold", withExtension: "otf")`
    static func sfProDisplaySemiboldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplaySemiboldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Display-SemiboldItalic", withExtension: "otf")`
    static func sfProDisplaySemiboldItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplaySemiboldItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Display-Thin", withExtension: "otf")`
    static func sfProDisplayThinOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayThinOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Display-ThinItalic", withExtension: "otf")`
    static func sfProDisplayThinItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayThinItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Display-Ultralight", withExtension: "otf")`
    static func sfProDisplayUltralightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayUltralightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "SF-Pro-Display-UltralightItalic", withExtension: "otf")`
    static func sfProDisplayUltralightItalicOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayUltralightItalicOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "awsconfiguration", withExtension: "json")`
    static func awsconfigurationJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.awsconfigurationJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "heart", withExtension: "json")`
    static func heartJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.heartJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "tree", withExtension: "json")`
    static func treeJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.treeJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 18 fonts.
  struct font: Rswift.Validatable {
    /// Font `SFProDisplay-BlackItalic`.
    static let sfProDisplayBlackItalic = Rswift.FontResource(fontName: "SFProDisplay-BlackItalic")
    /// Font `SFProDisplay-Black`.
    static let sfProDisplayBlack = Rswift.FontResource(fontName: "SFProDisplay-Black")
    /// Font `SFProDisplay-BoldItalic`.
    static let sfProDisplayBoldItalic = Rswift.FontResource(fontName: "SFProDisplay-BoldItalic")
    /// Font `SFProDisplay-Bold`.
    static let sfProDisplayBold = Rswift.FontResource(fontName: "SFProDisplay-Bold")
    /// Font `SFProDisplay-HeavyItalic`.
    static let sfProDisplayHeavyItalic = Rswift.FontResource(fontName: "SFProDisplay-HeavyItalic")
    /// Font `SFProDisplay-Heavy`.
    static let sfProDisplayHeavy = Rswift.FontResource(fontName: "SFProDisplay-Heavy")
    /// Font `SFProDisplay-Italic`.
    static let sfProDisplayItalic = Rswift.FontResource(fontName: "SFProDisplay-Italic")
    /// Font `SFProDisplay-LightItalic`.
    static let sfProDisplayLightItalic = Rswift.FontResource(fontName: "SFProDisplay-LightItalic")
    /// Font `SFProDisplay-Light`.
    static let sfProDisplayLight = Rswift.FontResource(fontName: "SFProDisplay-Light")
    /// Font `SFProDisplay-MediumItalic`.
    static let sfProDisplayMediumItalic = Rswift.FontResource(fontName: "SFProDisplay-MediumItalic")
    /// Font `SFProDisplay-Medium`.
    static let sfProDisplayMedium = Rswift.FontResource(fontName: "SFProDisplay-Medium")
    /// Font `SFProDisplay-Regular`.
    static let sfProDisplayRegular = Rswift.FontResource(fontName: "SFProDisplay-Regular")
    /// Font `SFProDisplay-SemiboldItalic`.
    static let sfProDisplaySemiboldItalic = Rswift.FontResource(fontName: "SFProDisplay-SemiboldItalic")
    /// Font `SFProDisplay-Semibold`.
    static let sfProDisplaySemibold = Rswift.FontResource(fontName: "SFProDisplay-Semibold")
    /// Font `SFProDisplay-ThinItalic`.
    static let sfProDisplayThinItalic = Rswift.FontResource(fontName: "SFProDisplay-ThinItalic")
    /// Font `SFProDisplay-Thin`.
    static let sfProDisplayThin = Rswift.FontResource(fontName: "SFProDisplay-Thin")
    /// Font `SFProDisplay-UltralightItalic`.
    static let sfProDisplayUltralightItalic = Rswift.FontResource(fontName: "SFProDisplay-UltralightItalic")
    /// Font `SFProDisplay-Ultralight`.
    static let sfProDisplayUltralight = Rswift.FontResource(fontName: "SFProDisplay-Ultralight")

    /// `UIFont(name: "SFProDisplay-Black", size: ...)`
    static func sfProDisplayBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayBlack, size: size)
    }

    /// `UIFont(name: "SFProDisplay-BlackItalic", size: ...)`
    static func sfProDisplayBlackItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayBlackItalic, size: size)
    }

    /// `UIFont(name: "SFProDisplay-Bold", size: ...)`
    static func sfProDisplayBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayBold, size: size)
    }

    /// `UIFont(name: "SFProDisplay-BoldItalic", size: ...)`
    static func sfProDisplayBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayBoldItalic, size: size)
    }

    /// `UIFont(name: "SFProDisplay-Heavy", size: ...)`
    static func sfProDisplayHeavy(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayHeavy, size: size)
    }

    /// `UIFont(name: "SFProDisplay-HeavyItalic", size: ...)`
    static func sfProDisplayHeavyItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayHeavyItalic, size: size)
    }

    /// `UIFont(name: "SFProDisplay-Italic", size: ...)`
    static func sfProDisplayItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayItalic, size: size)
    }

    /// `UIFont(name: "SFProDisplay-Light", size: ...)`
    static func sfProDisplayLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayLight, size: size)
    }

    /// `UIFont(name: "SFProDisplay-LightItalic", size: ...)`
    static func sfProDisplayLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayLightItalic, size: size)
    }

    /// `UIFont(name: "SFProDisplay-Medium", size: ...)`
    static func sfProDisplayMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayMedium, size: size)
    }

    /// `UIFont(name: "SFProDisplay-MediumItalic", size: ...)`
    static func sfProDisplayMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayMediumItalic, size: size)
    }

    /// `UIFont(name: "SFProDisplay-Regular", size: ...)`
    static func sfProDisplayRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayRegular, size: size)
    }

    /// `UIFont(name: "SFProDisplay-Semibold", size: ...)`
    static func sfProDisplaySemibold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplaySemibold, size: size)
    }

    /// `UIFont(name: "SFProDisplay-SemiboldItalic", size: ...)`
    static func sfProDisplaySemiboldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplaySemiboldItalic, size: size)
    }

    /// `UIFont(name: "SFProDisplay-Thin", size: ...)`
    static func sfProDisplayThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayThin, size: size)
    }

    /// `UIFont(name: "SFProDisplay-ThinItalic", size: ...)`
    static func sfProDisplayThinItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayThinItalic, size: size)
    }

    /// `UIFont(name: "SFProDisplay-Ultralight", size: ...)`
    static func sfProDisplayUltralight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayUltralight, size: size)
    }

    /// `UIFont(name: "SFProDisplay-UltralightItalic", size: ...)`
    static func sfProDisplayUltralightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayUltralightItalic, size: size)
    }

    static func validate() throws {
      if R.font.sfProDisplayBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Black' could not be loaded, is 'SF-Pro-Display-Black.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayBlackItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-BlackItalic' could not be loaded, is 'SF-Pro-Display-BlackItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Bold' could not be loaded, is 'SF-Pro-Display-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-BoldItalic' could not be loaded, is 'SF-Pro-Display-BoldItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayHeavy(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Heavy' could not be loaded, is 'SF-Pro-Display-Heavy.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayHeavyItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-HeavyItalic' could not be loaded, is 'SF-Pro-Display-HeavyItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Italic' could not be loaded, is 'SF-Pro-Display-RegularItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Light' could not be loaded, is 'SF-Pro-Display-Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-LightItalic' could not be loaded, is 'SF-Pro-Display-LightItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Medium' could not be loaded, is 'SF-Pro-Display-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-MediumItalic' could not be loaded, is 'SF-Pro-Display-MediumItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Regular' could not be loaded, is 'SF-Pro-Display-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplaySemibold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Semibold' could not be loaded, is 'SF-Pro-Display-Semibold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplaySemiboldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-SemiboldItalic' could not be loaded, is 'SF-Pro-Display-SemiboldItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Thin' could not be loaded, is 'SF-Pro-Display-Thin.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayThinItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-ThinItalic' could not be loaded, is 'SF-Pro-Display-ThinItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayUltralight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Ultralight' could not be loaded, is 'SF-Pro-Display-Ultralight.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfProDisplayUltralightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-UltralightItalic' could not be loaded, is 'SF-Pro-Display-UltralightItalic.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 70 images.
  struct image {
    /// Image `TreeBG`.
    static let treeBG = Rswift.ImageResource(bundle: R.hostingBundle, name: "TreeBG")
    /// Image `calender`.
    static let calender = Rswift.ImageResource(bundle: R.hostingBundle, name: "calender")
    /// Image `ic_Launch`.
    static let ic_Launch = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_Launch")
    /// Image `ic_add`.
    static let ic_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_add")
    /// Image `ic_alarm_speaker`.
    static let ic_alarm_speaker = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_alarm_speaker")
    /// Image `ic_calendar_green`.
    static let ic_calendar_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_calendar_green")
    /// Image `ic_calendar`.
    static let ic_calendar = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_calendar")
    /// Image `ic_change_password_green`.
    static let ic_change_password_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_change_password_green")
    /// Image `ic_check`.
    static let ic_check = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_check")
    /// Image `ic_clock_black`.
    static let ic_clock_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_clock_black")
    /// Image `ic_close_blak`.
    static let ic_close_blak = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_close_blak")
    /// Image `ic_close`.
    static let ic_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_close")
    /// Image `ic_date`.
    static let ic_date = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_date")
    /// Image `ic_delete_device`.
    static let ic_delete_device = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_delete_device")
    /// Image `ic_delete`.
    static let ic_delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_delete")
    /// Image `ic_device_add`.
    static let ic_device_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_device_add")
    /// Image `ic_device_tab`.
    static let ic_device_tab = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_device_tab")
    /// Image `ic_device_tree_green`.
    static let ic_device_tree_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_device_tree_green")
    /// Image `ic_dropUp`.
    static let ic_dropUp = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_dropUp")
    /// Image `ic_drop_down`.
    static let ic_drop_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_drop_down")
    /// Image `ic_drop`.
    static let ic_drop = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_drop")
    /// Image `ic_drops_green`.
    static let ic_drops_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_drops_green")
    /// Image `ic_dust_bin`.
    static let ic_dust_bin = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_dust_bin")
    /// Image `ic_edit_device`.
    static let ic_edit_device = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_edit_device")
    /// Image `ic_edit_green`.
    static let ic_edit_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_edit_green")
    /// Image `ic_edit_note`.
    static let ic_edit_note = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_edit_note")
    /// Image `ic_edit`.
    static let ic_edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_edit")
    /// Image `ic_email_green`.
    static let ic_email_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_email_green")
    /// Image `ic_email`.
    static let ic_email = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_email")
    /// Image `ic_filter`.
    static let ic_filter = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_filter")
    /// Image `ic_graph_tab`.
    static let ic_graph_tab = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_graph_tab")
    /// Image `ic_home_tab`.
    static let ic_home_tab = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_home_tab")
    /// Image `ic_last_updated_green`.
    static let ic_last_updated_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_last_updated_green")
    /// Image `ic_launch_screen`.
    static let ic_launch_screen = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_launch_screen")
    /// Image `ic_left_arrow`.
    static let ic_left_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_left_arrow")
    /// Image `ic_lightning_green`.
    static let ic_lightning_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_lightning_green")
    /// Image `ic_lock_green`.
    static let ic_lock_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_lock_green")
    /// Image `ic_logo`.
    static let ic_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_logo")
    /// Image `ic_logout-1`.
    static let ic_logout1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_logout-1")
    /// Image `ic_logout`.
    static let ic_logout = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_logout")
    /// Image `ic_map_pin_green`.
    static let ic_map_pin_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_map_pin_green")
    /// Image `ic_markicon`.
    static let ic_markicon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_markicon")
    /// Image `ic_notification_red_dot`.
    static let ic_notification_red_dot = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_notification_red_dot")
    /// Image `ic_notification_red`.
    static let ic_notification_red = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_notification_red")
    /// Image `ic_notification`.
    static let ic_notification = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_notification")
    /// Image `ic_option`.
    static let ic_option = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_option")
    /// Image `ic_password`.
    static let ic_password = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_password")
    /// Image `ic_phone`.
    static let ic_phone = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_phone")
    /// Image `ic_pin`.
    static let ic_pin = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_pin")
    /// Image `ic_raise_siren`.
    static let ic_raise_siren = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_raise_siren")
    /// Image `ic_red_dust_bin`.
    static let ic_red_dust_bin = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_red_dust_bin")
    /// Image `ic_refresh`.
    static let ic_refresh = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_refresh")
    /// Image `ic_right_arrow_green`.
    static let ic_right_arrow_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_right_arrow_green")
    /// Image `ic_settings_tab`.
    static let ic_settings_tab = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_settings_tab")
    /// Image `ic_side_menu_table_item`.
    static let ic_side_menu_table_item = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_side_menu_table_item")
    /// Image `ic_sidemenu`.
    static let ic_sidemenu = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_sidemenu")
    /// Image `ic_siren_red`.
    static let ic_siren_red = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_siren_red")
    /// Image `ic_siren`.
    static let ic_siren = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_siren")
    /// Image `ic_sort_asc`.
    static let ic_sort_asc = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_sort_asc")
    /// Image `ic_sort_desc`.
    static let ic_sort_desc = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_sort_desc")
    /// Image `ic_temp_green`.
    static let ic_temp_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_temp_green")
    /// Image `ic_uncheck`.
    static let ic_uncheck = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_uncheck")
    /// Image `ic_user_green`.
    static let ic_user_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_user_green")
    /// Image `ic_user_id_green`.
    static let ic_user_id_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_user_id_green")
    /// Image `ic_weather_green`.
    static let ic_weather_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_weather_green")
    /// Image `ic_weather_tab`.
    static let ic_weather_tab = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_weather_tab")
    /// Image `ic_wind_green`.
    static let ic_wind_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_wind_green")
    /// Image `ic_wind_orange`.
    static let ic_wind_orange = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_wind_orange")
    /// Image `stones`.
    static let stones = Rswift.ImageResource(bundle: R.hostingBundle, name: "stones")
    /// Image `tree`.
    static let tree = Rswift.ImageResource(bundle: R.hostingBundle, name: "tree")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TreeBG", bundle: ..., traitCollection: ...)`
    static func treeBG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.treeBG, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "calender", bundle: ..., traitCollection: ...)`
    static func calender(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calender, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_Launch", bundle: ..., traitCollection: ...)`
    static func ic_Launch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_Launch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_add", bundle: ..., traitCollection: ...)`
    static func ic_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_add, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_alarm_speaker", bundle: ..., traitCollection: ...)`
    static func ic_alarm_speaker(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_alarm_speaker, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_calendar", bundle: ..., traitCollection: ...)`
    static func ic_calendar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_calendar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_calendar_green", bundle: ..., traitCollection: ...)`
    static func ic_calendar_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_calendar_green, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_change_password_green", bundle: ..., traitCollection: ...)`
    static func ic_change_password_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_change_password_green, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_check", bundle: ..., traitCollection: ...)`
    static func ic_check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_check, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_clock_black", bundle: ..., traitCollection: ...)`
    static func ic_clock_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_clock_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_close", bundle: ..., traitCollection: ...)`
    static func ic_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_close_blak", bundle: ..., traitCollection: ...)`
    static func ic_close_blak(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_close_blak, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_date", bundle: ..., traitCollection: ...)`
    static func ic_date(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_date, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_delete", bundle: ..., traitCollection: ...)`
    static func ic_delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_delete, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_delete_device", bundle: ..., traitCollection: ...)`
    static func ic_delete_device(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_delete_device, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_device_add", bundle: ..., traitCollection: ...)`
    static func ic_device_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_device_add, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_device_tab", bundle: ..., traitCollection: ...)`
    static func ic_device_tab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_device_tab, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_device_tree_green", bundle: ..., traitCollection: ...)`
    static func ic_device_tree_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_device_tree_green, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_drop", bundle: ..., traitCollection: ...)`
    static func ic_drop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_drop, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_dropUp", bundle: ..., traitCollection: ...)`
    static func ic_dropUp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_dropUp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_drop_down", bundle: ..., traitCollection: ...)`
    static func ic_drop_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_drop_down, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_drops_green", bundle: ..., traitCollection: ...)`
    static func ic_drops_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_drops_green, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_dust_bin", bundle: ..., traitCollection: ...)`
    static func ic_dust_bin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_dust_bin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_edit", bundle: ..., traitCollection: ...)`
    static func ic_edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_edit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_edit_device", bundle: ..., traitCollection: ...)`
    static func ic_edit_device(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_edit_device, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_edit_green", bundle: ..., traitCollection: ...)`
    static func ic_edit_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_edit_green, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_edit_note", bundle: ..., traitCollection: ...)`
    static func ic_edit_note(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_edit_note, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_email", bundle: ..., traitCollection: ...)`
    static func ic_email(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_email, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_email_green", bundle: ..., traitCollection: ...)`
    static func ic_email_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_email_green, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_filter", bundle: ..., traitCollection: ...)`
    static func ic_filter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_filter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_graph_tab", bundle: ..., traitCollection: ...)`
    static func ic_graph_tab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_graph_tab, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_home_tab", bundle: ..., traitCollection: ...)`
    static func ic_home_tab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_home_tab, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_last_updated_green", bundle: ..., traitCollection: ...)`
    static func ic_last_updated_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_last_updated_green, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_launch_screen", bundle: ..., traitCollection: ...)`
    static func ic_launch_screen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_launch_screen, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_left_arrow", bundle: ..., traitCollection: ...)`
    static func ic_left_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_left_arrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_lightning_green", bundle: ..., traitCollection: ...)`
    static func ic_lightning_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_lightning_green, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_lock_green", bundle: ..., traitCollection: ...)`
    static func ic_lock_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_lock_green, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_logo", bundle: ..., traitCollection: ...)`
    static func ic_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_logout", bundle: ..., traitCollection: ...)`
    static func ic_logout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_logout, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_logout-1", bundle: ..., traitCollection: ...)`
    static func ic_logout1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_logout1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_map_pin_green", bundle: ..., traitCollection: ...)`
    static func ic_map_pin_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_map_pin_green, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_markicon", bundle: ..., traitCollection: ...)`
    static func ic_markicon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_markicon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_notification", bundle: ..., traitCollection: ...)`
    static func ic_notification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_notification, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_notification_red", bundle: ..., traitCollection: ...)`
    static func ic_notification_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_notification_red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_notification_red_dot", bundle: ..., traitCollection: ...)`
    static func ic_notification_red_dot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_notification_red_dot, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_option", bundle: ..., traitCollection: ...)`
    static func ic_option(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_option, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_password", bundle: ..., traitCollection: ...)`
    static func ic_password(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_password, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_phone", bundle: ..., traitCollection: ...)`
    static func ic_phone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_phone, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_pin", bundle: ..., traitCollection: ...)`
    static func ic_pin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_pin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_raise_siren", bundle: ..., traitCollection: ...)`
    static func ic_raise_siren(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_raise_siren, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_red_dust_bin", bundle: ..., traitCollection: ...)`
    static func ic_red_dust_bin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_red_dust_bin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_refresh", bundle: ..., traitCollection: ...)`
    static func ic_refresh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_refresh, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_right_arrow_green", bundle: ..., traitCollection: ...)`
    static func ic_right_arrow_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_right_arrow_green, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_settings_tab", bundle: ..., traitCollection: ...)`
    static func ic_settings_tab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_settings_tab, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_side_menu_table_item", bundle: ..., traitCollection: ...)`
    static func ic_side_menu_table_item(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_side_menu_table_item, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_sidemenu", bundle: ..., traitCollection: ...)`
    static func ic_sidemenu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_sidemenu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_siren", bundle: ..., traitCollection: ...)`
    static func ic_siren(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_siren, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_siren_red", bundle: ..., traitCollection: ...)`
    static func ic_siren_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_siren_red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_sort_asc", bundle: ..., traitCollection: ...)`
    static func ic_sort_asc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_sort_asc, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_sort_desc", bundle: ..., traitCollection: ...)`
    static func ic_sort_desc(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_sort_desc, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_temp_green", bundle: ..., traitCollection: ...)`
    static func ic_temp_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_temp_green, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_uncheck", bundle: ..., traitCollection: ...)`
    static func ic_uncheck(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_uncheck, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_user_green", bundle: ..., traitCollection: ...)`
    static func ic_user_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_user_green, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_user_id_green", bundle: ..., traitCollection: ...)`
    static func ic_user_id_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_user_id_green, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_weather_green", bundle: ..., traitCollection: ...)`
    static func ic_weather_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_weather_green, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_weather_tab", bundle: ..., traitCollection: ...)`
    static func ic_weather_tab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_weather_tab, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_wind_green", bundle: ..., traitCollection: ...)`
    static func ic_wind_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_wind_green, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_wind_orange", bundle: ..., traitCollection: ...)`
    static func ic_wind_orange(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_wind_orange, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "stones", bundle: ..., traitCollection: ...)`
    static func stones(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.stones, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tree", bundle: ..., traitCollection: ...)`
    static func tree(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tree, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Onboarding"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 17 nibs.
  struct nib {
    /// Nib `CalibrationPointCell`.
    static let calibrationPointCell = _R.nib._CalibrationPointCell()
    /// Nib `CommonHeader`.
    static let commonHeader = _R.nib._CommonHeader()
    /// Nib `CommonPopup`.
    static let commonPopup = _R.nib._CommonPopup()
    /// Nib `CustomMakerView`.
    static let customMakerView = _R.nib._CustomMakerView()
    /// Nib `DateRangeSelection`.
    static let dateRangeSelection = _R.nib._DateRangeSelection()
    /// Nib `DeviceCell`.
    static let deviceCell = _R.nib._DeviceCell()
    /// Nib `DeviceTreeCell`.
    static let deviceTreeCell = _R.nib._DeviceTreeCell()
    /// Nib `HomeCell`.
    static let homeCell = _R.nib._HomeCell()
    /// Nib `MyNoteCell`.
    static let myNoteCell = _R.nib._MyNoteCell()
    /// Nib `NotificationCell`.
    static let notificationCell = _R.nib._NotificationCell()
    /// Nib `ProfileCell`.
    static let profileCell = _R.nib._ProfileCell()
    /// Nib `PropertyCell`.
    static let propertyCell = _R.nib._PropertyCell()
    /// Nib `SirenCell`.
    static let sirenCell = _R.nib._SirenCell()
    /// Nib `TagCell`.
    static let tagCell = _R.nib._TagCell()
    /// Nib `UserCell`.
    static let userCell = _R.nib._UserCell()
    /// Nib `WeatherCategoryCell`.
    static let weatherCategoryCell = _R.nib._WeatherCategoryCell()
    /// Nib `WeatherCell`.
    static let weatherCell = _R.nib._WeatherCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CalibrationPointCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.calibrationPointCell) instead")
    static func calibrationPointCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.calibrationPointCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CommonHeader", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.commonHeader) instead")
    static func commonHeader(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.commonHeader)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CommonPopup", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.commonPopup) instead")
    static func commonPopup(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.commonPopup)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CustomMakerView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.customMakerView) instead")
    static func customMakerView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.customMakerView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DateRangeSelection", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.dateRangeSelection) instead")
    static func dateRangeSelection(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.dateRangeSelection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DeviceCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.deviceCell) instead")
    static func deviceCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.deviceCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DeviceTreeCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.deviceTreeCell) instead")
    static func deviceTreeCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.deviceTreeCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HomeCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeCell) instead")
    static func homeCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MyNoteCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.myNoteCell) instead")
    static func myNoteCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myNoteCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NotificationCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.notificationCell) instead")
    static func notificationCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.notificationCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProfileCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.profileCell) instead")
    static func profileCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PropertyCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.propertyCell) instead")
    static func propertyCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.propertyCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SirenCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.sirenCell) instead")
    static func sirenCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sirenCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TagCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.tagCell) instead")
    static func tagCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tagCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "UserCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.userCell) instead")
    static func userCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WeatherCategoryCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.weatherCategoryCell) instead")
    static func weatherCategoryCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.weatherCategoryCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WeatherCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.weatherCell) instead")
    static func weatherCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.weatherCell)
    }
    #endif

    static func calibrationPointCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CalibrationPointCell? {
      return R.nib.calibrationPointCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CalibrationPointCell
    }

    static func commonHeader(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CommonHeader? {
      return R.nib.commonHeader.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CommonHeader
    }

    static func commonPopup(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.commonPopup.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func customMakerView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.customMakerView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func dateRangeSelection(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.dateRangeSelection.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func deviceCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DeviceCell? {
      return R.nib.deviceCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DeviceCell
    }

    static func deviceTreeCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DeviceTreeCell? {
      return R.nib.deviceTreeCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DeviceTreeCell
    }

    static func homeCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeCell? {
      return R.nib.homeCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeCell
    }

    static func myNoteCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyNoteCell? {
      return R.nib.myNoteCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyNoteCell
    }

    static func notificationCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationCell? {
      return R.nib.notificationCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationCell
    }

    static func profileCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileCell? {
      return R.nib.profileCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileCell
    }

    static func propertyCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PropertyCell? {
      return R.nib.propertyCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PropertyCell
    }

    static func sirenCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SirenCell? {
      return R.nib.sirenCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SirenCell
    }

    static func tagCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TagCell? {
      return R.nib.tagCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TagCell
    }

    static func userCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserCell? {
      return R.nib.userCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserCell
    }

    static func weatherCategoryCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WeatherCategoryCell? {
      return R.nib.weatherCategoryCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WeatherCategoryCell
    }

    static func weatherCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WeatherCell? {
      return R.nib.weatherCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WeatherCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `TagCell`.
    static let tagCell: Rswift.ReuseIdentifier<TagCell> = Rswift.ReuseIdentifier(identifier: "TagCell")
    /// Reuse identifier `cell`.
    static let cell: Rswift.ReuseIdentifier<SideMenuTableCell> = Rswift.ReuseIdentifier(identifier: "cell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 31 localization keys.
    struct localizable {
      /// Value: Are you sure you want to delete this note?
      static let areYouSureYouWantToDeleteThisNote = Rswift.StringResource(key: "Are you sure you want to delete this note?", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Are you sure, you want to delete this device?
      static let deleteDeviceConfirmation = Rswift.StringResource(key: "deleteDeviceConfirmation", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: CANCEL
      static let canceL = Rswift.StringResource(key: "CANCEL", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Could not set password.
      static let couldNotSetPassword = Rswift.StringResource(key: "Could not set password.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Data not found.
      static let dataNotFound = Rswift.StringResource(key: "Data not found.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Device data not found.
      static let deviceDataNotFound = Rswift.StringResource(key: "Device data not found.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Error
      static let error = Rswift.StringResource(key: "Error", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: NO
      static let nO = Rswift.StringResource(key: "NO", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No Record Found.
      static let noRecordFound = Rswift.StringResource(key: "No Record Found.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No property found. If the problem persists, please contact your system administrator.
      static let noPropertyFoundIfTheProblemPersistsPleaseContactYourSystemAdministrator = Rswift.StringResource(key: "No property found. If the problem persists, please contact your system administrator.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Notes not found.
      static let notesNotFound = Rswift.StringResource(key: "Notes not found.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: OKAY
      static let okaY = Rswift.StringResource(key: "OKAY", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Password reset successfully.
      static let passwordResetSuccessfully = Rswift.StringResource(key: "Password reset successfully.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please eneter valid confirm password.
      static let pleaseEneterValidConfirmPassword = Rswift.StringResource(key: "Please eneter valid confirm password.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please enter a decription for note.
      static let pleaseEnterADecriptionForNote = Rswift.StringResource(key: "Please enter a decription for note.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please enter a title for note.
      static let pleaseEnterATitleForNote = Rswift.StringResource(key: "Please enter a title for note.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please enter confirm password.
      static let pleaseEnterConfirmPassword = Rswift.StringResource(key: "Please enter confirm password.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please enter email.
      static let pleaseEnterEmail = Rswift.StringResource(key: "Please enter email.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please enter first name.
      static let pleaseEnterFirstName = Rswift.StringResource(key: "Please enter first name.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please enter last name.
      static let pleaseEnterLastName = Rswift.StringResource(key: "Please enter last name.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please enter new password.
      static let pleaseEnterNewPassword = Rswift.StringResource(key: "Please enter new password.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please enter old password.
      static let pleaseEnterOldPassword = Rswift.StringResource(key: "Please enter old password.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please enter password.
      static let pleaseEnterPassword = Rswift.StringResource(key: "Please enter password.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please enter phone number.
      static let pleaseEnterPhoneNumber = Rswift.StringResource(key: "Please enter phone number.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please enter user name.
      static let pleaseEnterUserName = Rswift.StringResource(key: "Please enter user name.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please enter valid email.
      static let pleaseEnterValidEmail = Rswift.StringResource(key: "Please enter valid email.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please enter valid verification code.
      static let pleaseEnterValidVerificationCode = Rswift.StringResource(key: "Please enter valid verification code.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Something Went Wrong Please Try Again Later.
      static let somethingWentWrongPleaseTryAgainLater = Rswift.StringResource(key: "Something Went Wrong Please Try Again Later.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: This App Requires An Internet Connection. Make Sure You Have Cell Service Or Wifi Connection And Give It Another Try.
      static let thisAppRequiresAnInternetConnectionMakeSureYouHaveCellServiceOrWifiConnectionAndGiveItAnotherTry = Rswift.StringResource(key: "This App Requires An Internet Connection. Make Sure You Have Cell Service Or Wifi Connection And Give It Another Try.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Weather data not found.
      static let weatherDataNotFound = Rswift.StringResource(key: "Weather data not found.", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: YES
      static let yeS = Rswift.StringResource(key: "YES", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Are you sure you want to delete this note?
      static func areYouSureYouWantToDeleteThisNote(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Are you sure you want to delete this note?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Are you sure you want to delete this note?"
        }

        return NSLocalizedString("Are you sure you want to delete this note?", bundle: bundle, comment: "")
      }

      /// Value: Are you sure, you want to delete this device?
      static func deleteDeviceConfirmation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("deleteDeviceConfirmation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "deleteDeviceConfirmation"
        }

        return NSLocalizedString("deleteDeviceConfirmation", bundle: bundle, comment: "")
      }

      /// Value: CANCEL
      static func canceL(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CANCEL", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "CANCEL"
        }

        return NSLocalizedString("CANCEL", bundle: bundle, comment: "")
      }

      /// Value: Could not set password.
      static func couldNotSetPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Could not set password.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Could not set password."
        }

        return NSLocalizedString("Could not set password.", bundle: bundle, comment: "")
      }

      /// Value: Data not found.
      static func dataNotFound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Data not found.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Data not found."
        }

        return NSLocalizedString("Data not found.", bundle: bundle, comment: "")
      }

      /// Value: Device data not found.
      static func deviceDataNotFound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Device data not found.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Device data not found."
        }

        return NSLocalizedString("Device data not found.", bundle: bundle, comment: "")
      }

      /// Value: Error
      static func error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Error"
        }

        return NSLocalizedString("Error", bundle: bundle, comment: "")
      }

      /// Value: NO
      static func nO(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NO", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "NO"
        }

        return NSLocalizedString("NO", bundle: bundle, comment: "")
      }

      /// Value: No Record Found.
      static func noRecordFound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No Record Found.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No Record Found."
        }

        return NSLocalizedString("No Record Found.", bundle: bundle, comment: "")
      }

      /// Value: No property found. If the problem persists, please contact your system administrator.
      static func noPropertyFoundIfTheProblemPersistsPleaseContactYourSystemAdministrator(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("No property found. If the problem persists, please contact your system administrator.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "No property found. If the problem persists, please contact your system administrator."
        }

        return NSLocalizedString("No property found. If the problem persists, please contact your system administrator.", bundle: bundle, comment: "")
      }

      /// Value: Notes not found.
      static func notesNotFound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Notes not found.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Notes not found."
        }

        return NSLocalizedString("Notes not found.", bundle: bundle, comment: "")
      }

      /// Value: OKAY
      static func okaY(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OKAY", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OKAY"
        }

        return NSLocalizedString("OKAY", bundle: bundle, comment: "")
      }

      /// Value: Password reset successfully.
      static func passwordResetSuccessfully(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Password reset successfully.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Password reset successfully."
        }

        return NSLocalizedString("Password reset successfully.", bundle: bundle, comment: "")
      }

      /// Value: Please eneter valid confirm password.
      static func pleaseEneterValidConfirmPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please eneter valid confirm password.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please eneter valid confirm password."
        }

        return NSLocalizedString("Please eneter valid confirm password.", bundle: bundle, comment: "")
      }

      /// Value: Please enter a decription for note.
      static func pleaseEnterADecriptionForNote(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter a decription for note.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter a decription for note."
        }

        return NSLocalizedString("Please enter a decription for note.", bundle: bundle, comment: "")
      }

      /// Value: Please enter a title for note.
      static func pleaseEnterATitleForNote(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter a title for note.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter a title for note."
        }

        return NSLocalizedString("Please enter a title for note.", bundle: bundle, comment: "")
      }

      /// Value: Please enter confirm password.
      static func pleaseEnterConfirmPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter confirm password.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter confirm password."
        }

        return NSLocalizedString("Please enter confirm password.", bundle: bundle, comment: "")
      }

      /// Value: Please enter email.
      static func pleaseEnterEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter email.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter email."
        }

        return NSLocalizedString("Please enter email.", bundle: bundle, comment: "")
      }

      /// Value: Please enter first name.
      static func pleaseEnterFirstName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter first name.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter first name."
        }

        return NSLocalizedString("Please enter first name.", bundle: bundle, comment: "")
      }

      /// Value: Please enter last name.
      static func pleaseEnterLastName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter last name.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter last name."
        }

        return NSLocalizedString("Please enter last name.", bundle: bundle, comment: "")
      }

      /// Value: Please enter new password.
      static func pleaseEnterNewPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter new password.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter new password."
        }

        return NSLocalizedString("Please enter new password.", bundle: bundle, comment: "")
      }

      /// Value: Please enter old password.
      static func pleaseEnterOldPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter old password.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter old password."
        }

        return NSLocalizedString("Please enter old password.", bundle: bundle, comment: "")
      }

      /// Value: Please enter password.
      static func pleaseEnterPassword(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter password.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter password."
        }

        return NSLocalizedString("Please enter password.", bundle: bundle, comment: "")
      }

      /// Value: Please enter phone number.
      static func pleaseEnterPhoneNumber(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter phone number.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter phone number."
        }

        return NSLocalizedString("Please enter phone number.", bundle: bundle, comment: "")
      }

      /// Value: Please enter user name.
      static func pleaseEnterUserName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter user name.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter user name."
        }

        return NSLocalizedString("Please enter user name.", bundle: bundle, comment: "")
      }

      /// Value: Please enter valid email.
      static func pleaseEnterValidEmail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter valid email.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter valid email."
        }

        return NSLocalizedString("Please enter valid email.", bundle: bundle, comment: "")
      }

      /// Value: Please enter valid verification code.
      static func pleaseEnterValidVerificationCode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter valid verification code.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter valid verification code."
        }

        return NSLocalizedString("Please enter valid verification code.", bundle: bundle, comment: "")
      }

      /// Value: Something Went Wrong Please Try Again Later.
      static func somethingWentWrongPleaseTryAgainLater(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Something Went Wrong Please Try Again Later.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Something Went Wrong Please Try Again Later."
        }

        return NSLocalizedString("Something Went Wrong Please Try Again Later.", bundle: bundle, comment: "")
      }

      /// Value: This App Requires An Internet Connection. Make Sure You Have Cell Service Or Wifi Connection And Give It Another Try.
      static func thisAppRequiresAnInternetConnectionMakeSureYouHaveCellServiceOrWifiConnectionAndGiveItAnotherTry(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("This App Requires An Internet Connection. Make Sure You Have Cell Service Or Wifi Connection And Give It Another Try.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "This App Requires An Internet Connection. Make Sure You Have Cell Service Or Wifi Connection And Give It Another Try."
        }

        return NSLocalizedString("This App Requires An Internet Connection. Make Sure You Have Cell Service Or Wifi Connection And Give It Another Try.", bundle: bundle, comment: "")
      }

      /// Value: Weather data not found.
      static func weatherDataNotFound(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Weather data not found.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Weather data not found."
        }

        return NSLocalizedString("Weather data not found.", bundle: bundle, comment: "")
      }

      /// Value: YES
      static func yeS(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("YES", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "YES"
        }

        return NSLocalizedString("YES", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _CalibrationPointCell.validate()
      try _DateRangeSelection.validate()
      try _DeviceCell.validate()
      try _DeviceTreeCell.validate()
      try _HomeCell.validate()
      try _NotificationCell.validate()
      try _ProfileCell.validate()
      try _PropertyCell.validate()
      try _SirenCell.validate()
      try _UserCell.validate()
      try _WeatherCell.validate()
    }

    struct _CalibrationPointCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CalibrationPointCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CalibrationPointCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CalibrationPointCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_refresh", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_refresh' is used in nib 'CalibrationPointCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "clr_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'clr_bg' is used in nib 'CalibrationPointCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "clr_light_green", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'clr_light_green' is used in nib 'CalibrationPointCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "grayTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'grayTextColor' is used in nib 'CalibrationPointCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _CommonHeader: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CommonHeader"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CommonHeader? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CommonHeader
      }

      fileprivate init() {}
    }

    struct _CommonPopup: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CommonPopup"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _CustomMakerView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CustomMakerView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _DateRangeSelection: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "DateRangeSelection"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_date", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_date' is used in nib 'DateRangeSelection', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "clr_dark_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'clr_dark_bg' is used in nib 'DateRangeSelection', but couldn't be loaded.") }
          if UIKit.UIColor(named: "clr_light_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'clr_light_bg' is used in nib 'DateRangeSelection', but couldn't be loaded.") }
          if UIKit.UIColor(named: "lightFonrColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'lightFonrColor' is used in nib 'DateRangeSelection', but couldn't be loaded.") }
          if UIKit.UIColor(named: "normalFontColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'normalFontColor' is used in nib 'DateRangeSelection', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _DeviceCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "DeviceCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DeviceCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DeviceCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_delete_device", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_delete_device' is used in nib 'DeviceCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_device_tree_green", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_device_tree_green' is used in nib 'DeviceCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_edit_device", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_edit_device' is used in nib 'DeviceCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_pin", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_pin' is used in nib 'DeviceCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "grayTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'grayTextColor' is used in nib 'DeviceCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "normalTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'normalTextColor' is used in nib 'DeviceCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _DeviceTreeCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "DeviceTreeCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DeviceTreeCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DeviceTreeCell
      }

      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DeviceTreeCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? DeviceTreeCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_drop", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_drop' is used in nib 'DeviceTreeCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "clr_light_green", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'clr_light_green' is used in nib 'DeviceTreeCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _HomeCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "HomeCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeCell
      }

      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? HomeCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "TreeBG", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TreeBG' is used in nib 'HomeCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_drop_down", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_drop_down' is used in nib 'HomeCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_filter", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_filter' is used in nib 'HomeCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "stones", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'stones' is used in nib 'HomeCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tree", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tree' is used in nib 'HomeCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "clr_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'clr_bg' is used in nib 'HomeCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "clr_dark_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'clr_dark_bg' is used in nib 'HomeCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "clr_light_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'clr_light_bg' is used in nib 'HomeCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _MyNoteCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MyNoteCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MyNoteCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyNoteCell
      }

      fileprivate init() {}
    }

    struct _NotificationCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "NotificationCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_calendar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_calendar' is used in nib 'NotificationCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_clock_black", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_clock_black' is used in nib 'NotificationCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_siren_red", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_siren_red' is used in nib 'NotificationCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ProfileCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ProfileCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileCell
      }

      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProfileCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? ProfileCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_edit_green", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_edit_green' is used in nib 'ProfileCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_user_green", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_user_green' is used in nib 'ProfileCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _PropertyCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PropertyCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> PropertyCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PropertyCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_map_pin_green", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_map_pin_green' is used in nib 'PropertyCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "grayTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'grayTextColor' is used in nib 'PropertyCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "normalTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'normalTextColor' is used in nib 'PropertyCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SirenCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SirenCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SirenCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SirenCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_siren", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_siren' is used in nib 'SirenCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _TagCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TagCell

      let bundle = R.hostingBundle
      let identifier = "TagCell"
      let name = "TagCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TagCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TagCell
      }

      fileprivate init() {}
    }

    struct _UserCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "UserCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UserCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UserCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_red_dust_bin", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_red_dust_bin' is used in nib 'UserCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_user_green", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_user_green' is used in nib 'UserCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "clr_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'clr_bg' is used in nib 'UserCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _WeatherCategoryCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "WeatherCategoryCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WeatherCategoryCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WeatherCategoryCell
      }

      fileprivate init() {}
    }

    struct _WeatherCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WeatherCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> WeatherCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? WeatherCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_calendar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_calendar' is used in nib 'WeatherCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_weather_green", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_weather_green' is used in nib 'WeatherCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try bottomTAB.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try common.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try deviceTree.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try onboarding.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try settings.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try weather.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct bottomTAB: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let deviceListVC = StoryboardViewControllerResource<DeviceListVC>(identifier: "DeviceListVC")
      let homeVC = StoryboardViewControllerResource<HomeVC>(identifier: "HomeVC")
      let name = "BottomTAB"
      let propertyVC = StoryboardViewControllerResource<PropertyVC>(identifier: "PropertyVC")
      let settingNVC = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "SettingNVC")
      let settingsVC = StoryboardViewControllerResource<SettingsVC>(identifier: "SettingsVC")
      let tabController = StoryboardViewControllerResource<TABController>(identifier: "TABController")
      let weatherVC = StoryboardViewControllerResource<WeatherVC>(identifier: "WeatherVC")

      func deviceListVC(_: Void = ()) -> DeviceListVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: deviceListVC)
      }

      func homeVC(_: Void = ()) -> HomeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: homeVC)
      }

      func propertyVC(_: Void = ()) -> PropertyVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: propertyVC)
      }

      func settingNVC(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingNVC)
      }

      func settingsVC(_: Void = ()) -> SettingsVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingsVC)
      }

      func tabController(_: Void = ()) -> TABController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tabController)
      }

      func weatherVC(_: Void = ()) -> WeatherVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: weatherVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_close_blak", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_close_blak' is used in storyboard 'BottomTAB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_device_add", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_device_add' is used in storyboard 'BottomTAB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_device_tab", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_device_tab' is used in storyboard 'BottomTAB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_drop", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_drop' is used in storyboard 'BottomTAB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_edit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_edit' is used in storyboard 'BottomTAB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_home_tab", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_home_tab' is used in storyboard 'BottomTAB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_left_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_left_arrow' is used in storyboard 'BottomTAB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_notification", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_notification' is used in storyboard 'BottomTAB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_settings_tab", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_settings_tab' is used in storyboard 'BottomTAB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_sidemenu", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_sidemenu' is used in storyboard 'BottomTAB', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_weather_tab", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_weather_tab' is used in storyboard 'BottomTAB', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "clr_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'clr_bg' is used in storyboard 'BottomTAB', but couldn't be loaded.") }
          if UIKit.UIColor(named: "clr_light_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'clr_light_bg' is used in storyboard 'BottomTAB', but couldn't be loaded.") }
        }
        if _R.storyboard.bottomTAB().deviceListVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'deviceListVC' could not be loaded from storyboard 'BottomTAB' as 'DeviceListVC'.") }
        if _R.storyboard.bottomTAB().homeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'homeVC' could not be loaded from storyboard 'BottomTAB' as 'HomeVC'.") }
        if _R.storyboard.bottomTAB().propertyVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'propertyVC' could not be loaded from storyboard 'BottomTAB' as 'PropertyVC'.") }
        if _R.storyboard.bottomTAB().settingNVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingNVC' could not be loaded from storyboard 'BottomTAB' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.bottomTAB().settingsVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingsVC' could not be loaded from storyboard 'BottomTAB' as 'SettingsVC'.") }
        if _R.storyboard.bottomTAB().tabController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tabController' could not be loaded from storyboard 'BottomTAB' as 'TABController'.") }
        if _R.storyboard.bottomTAB().weatherVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'weatherVC' could not be loaded from storyboard 'BottomTAB' as 'WeatherVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct common: Rswift.StoryboardResourceType, Rswift.Validatable {
      let addAlarmDeviceVC = StoryboardViewControllerResource<AddAlarmDeviceVC>(identifier: "AddAlarmDeviceVC")
      let addTreeTiltDeviceVC = StoryboardViewControllerResource<AddTreeTiltDeviceVC>(identifier: "AddTreeTiltDeviceVC")
      let bundle = R.hostingBundle
      let createNoteVC = StoryboardViewControllerResource<CreateNoteVC>(identifier: "CreateNoteVC")
      let myNotesVC = StoryboardViewControllerResource<MyNotesVC>(identifier: "MyNotesVC")
      let name = "Common"
      let noteVC = StoryboardViewControllerResource<NoteVC>(identifier: "NoteVC")
      let notificationListVC = StoryboardViewControllerResource<NotificationListVC>(identifier: "NotificationListVC")

      func addAlarmDeviceVC(_: Void = ()) -> AddAlarmDeviceVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addAlarmDeviceVC)
      }

      func addTreeTiltDeviceVC(_: Void = ()) -> AddTreeTiltDeviceVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addTreeTiltDeviceVC)
      }

      func createNoteVC(_: Void = ()) -> CreateNoteVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: createNoteVC)
      }

      func myNotesVC(_: Void = ()) -> MyNotesVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myNotesVC)
      }

      func noteVC(_: Void = ()) -> NoteVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: noteVC)
      }

      func notificationListVC(_: Void = ()) -> NotificationListVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: notificationListVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "calender", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'calender' is used in storyboard 'Common', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_add", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_add' is used in storyboard 'Common', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_close_blak", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_close_blak' is used in storyboard 'Common', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_delete", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_delete' is used in storyboard 'Common', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_drop", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_drop' is used in storyboard 'Common', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_dust_bin", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_dust_bin' is used in storyboard 'Common', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_edit_note", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_edit_note' is used in storyboard 'Common', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_left_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_left_arrow' is used in storyboard 'Common', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_markicon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_markicon' is used in storyboard 'Common', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_option", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_option' is used in storyboard 'Common', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_sort_asc", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_sort_asc' is used in storyboard 'Common', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "clr_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'clr_bg' is used in storyboard 'Common', but couldn't be loaded.") }
          if UIKit.UIColor(named: "clr_light_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'clr_light_bg' is used in storyboard 'Common', but couldn't be loaded.") }
          if UIKit.UIColor(named: "grayTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'grayTextColor' is used in storyboard 'Common', but couldn't be loaded.") }
        }
        if _R.storyboard.common().addAlarmDeviceVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addAlarmDeviceVC' could not be loaded from storyboard 'Common' as 'AddAlarmDeviceVC'.") }
        if _R.storyboard.common().addTreeTiltDeviceVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addTreeTiltDeviceVC' could not be loaded from storyboard 'Common' as 'AddTreeTiltDeviceVC'.") }
        if _R.storyboard.common().createNoteVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'createNoteVC' could not be loaded from storyboard 'Common' as 'CreateNoteVC'.") }
        if _R.storyboard.common().myNotesVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myNotesVC' could not be loaded from storyboard 'Common' as 'MyNotesVC'.") }
        if _R.storyboard.common().noteVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'noteVC' could not be loaded from storyboard 'Common' as 'NoteVC'.") }
        if _R.storyboard.common().notificationListVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'notificationListVC' could not be loaded from storyboard 'Common' as 'NotificationListVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct deviceTree: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let deviceTreeListVC = StoryboardViewControllerResource<DeviceTreeListVC>(identifier: "DeviceTreeListVC")
      let deviceTreeVC = StoryboardViewControllerResource<DeviceTreeVC>(identifier: "DeviceTreeVC")
      let name = "DeviceTree"
      let sirenDetailVC = StoryboardViewControllerResource<SirenDetailVC>(identifier: "SirenDetailVC")

      func deviceTreeListVC(_: Void = ()) -> DeviceTreeListVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: deviceTreeListVC)
      }

      func deviceTreeVC(_: Void = ()) -> DeviceTreeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: deviceTreeVC)
      }

      func sirenDetailVC(_: Void = ()) -> SirenDetailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sirenDetailVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_device_tree_green", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_device_tree_green' is used in storyboard 'DeviceTree', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_edit", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_edit' is used in storyboard 'DeviceTree', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_left_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_left_arrow' is used in storyboard 'DeviceTree', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_notification", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_notification' is used in storyboard 'DeviceTree', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_siren", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_siren' is used in storyboard 'DeviceTree', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "clr_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'clr_bg' is used in storyboard 'DeviceTree', but couldn't be loaded.") }
          if UIKit.UIColor(named: "clr_light_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'clr_light_bg' is used in storyboard 'DeviceTree', but couldn't be loaded.") }
        }
        if _R.storyboard.deviceTree().deviceTreeListVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'deviceTreeListVC' could not be loaded from storyboard 'DeviceTree' as 'DeviceTreeListVC'.") }
        if _R.storyboard.deviceTree().deviceTreeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'deviceTreeVC' could not be loaded from storyboard 'DeviceTree' as 'DeviceTreeVC'.") }
        if _R.storyboard.deviceTree().sirenDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sirenDetailVC' could not be loaded from storyboard 'DeviceTree' as 'SirenDetailVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "ic_Launch", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_Launch' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct onboarding: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let changePasswordVC = StoryboardViewControllerResource<ChangePasswordVC>(identifier: "ChangePasswordVC")
      let forgotPasswordVC = StoryboardViewControllerResource<ForgotPasswordVC>(identifier: "ForgotPasswordVC")
      let landingVC = StoryboardViewControllerResource<LandingVC>(identifier: "LandingVC")
      let loginVC = StoryboardViewControllerResource<LoginVC>(identifier: "LoginVC")
      let name = "Onboarding"
      let registrationVC = StoryboardViewControllerResource<RegistrationVC>(identifier: "RegistrationVC")
      let resetPasswordVC = StoryboardViewControllerResource<ResetPasswordVC>(identifier: "ResetPasswordVC")
      let sideMenuVC = StoryboardViewControllerResource<SideMenuVC>(identifier: "SideMenuVC")
      let splashVC = StoryboardViewControllerResource<SplashVC>(identifier: "SplashVC")

      func changePasswordVC(_: Void = ()) -> ChangePasswordVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: changePasswordVC)
      }

      func forgotPasswordVC(_: Void = ()) -> ForgotPasswordVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: forgotPasswordVC)
      }

      func landingVC(_: Void = ()) -> LandingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: landingVC)
      }

      func loginVC(_: Void = ()) -> LoginVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: loginVC)
      }

      func registrationVC(_: Void = ()) -> RegistrationVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: registrationVC)
      }

      func resetPasswordVC(_: Void = ()) -> ResetPasswordVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: resetPasswordVC)
      }

      func sideMenuVC(_: Void = ()) -> SideMenuVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sideMenuVC)
      }

      func splashVC(_: Void = ()) -> SplashVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: splashVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_Launch", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_Launch' is used in storyboard 'Onboarding', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_close", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_close' is used in storyboard 'Onboarding', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_left_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_left_arrow' is used in storyboard 'Onboarding', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_logo' is used in storyboard 'Onboarding', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_logout-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_logout-1' is used in storyboard 'Onboarding', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_side_menu_table_item", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_side_menu_table_item' is used in storyboard 'Onboarding', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_uncheck", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_uncheck' is used in storyboard 'Onboarding', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "clr_dark_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'clr_dark_bg' is used in storyboard 'Onboarding', but couldn't be loaded.") }
          if UIKit.UIColor(named: "clr_light_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'clr_light_bg' is used in storyboard 'Onboarding', but couldn't be loaded.") }
          if UIKit.UIColor(named: "clr_logout", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'clr_logout' is used in storyboard 'Onboarding', but couldn't be loaded.") }
          if UIKit.UIColor(named: "clr_logout_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'clr_logout_bg' is used in storyboard 'Onboarding', but couldn't be loaded.") }
          if UIKit.UIColor(named: "clr_sidemenu_table", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'clr_sidemenu_table' is used in storyboard 'Onboarding', but couldn't be loaded.") }
        }
        if _R.storyboard.onboarding().changePasswordVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'changePasswordVC' could not be loaded from storyboard 'Onboarding' as 'ChangePasswordVC'.") }
        if _R.storyboard.onboarding().forgotPasswordVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'forgotPasswordVC' could not be loaded from storyboard 'Onboarding' as 'ForgotPasswordVC'.") }
        if _R.storyboard.onboarding().landingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'landingVC' could not be loaded from storyboard 'Onboarding' as 'LandingVC'.") }
        if _R.storyboard.onboarding().loginVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'loginVC' could not be loaded from storyboard 'Onboarding' as 'LoginVC'.") }
        if _R.storyboard.onboarding().registrationVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'registrationVC' could not be loaded from storyboard 'Onboarding' as 'RegistrationVC'.") }
        if _R.storyboard.onboarding().resetPasswordVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'resetPasswordVC' could not be loaded from storyboard 'Onboarding' as 'ResetPasswordVC'.") }
        if _R.storyboard.onboarding().sideMenuVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sideMenuVC' could not be loaded from storyboard 'Onboarding' as 'SideMenuVC'.") }
        if _R.storyboard.onboarding().splashVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'splashVC' could not be loaded from storyboard 'Onboarding' as 'SplashVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct settings: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let editProfileVC = StoryboardViewControllerResource<EditProfileVC>(identifier: "EditProfileVC")
      let name = "Settings"
      let settingsListVC = StoryboardViewControllerResource<SettingsListVC>(identifier: "SettingsListVC")
      let userProfileDetailVC = StoryboardViewControllerResource<UserProfileDetailVC>(identifier: "UserProfileDetailVC")

      func editProfileVC(_: Void = ()) -> EditProfileVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editProfileVC)
      }

      func settingsListVC(_: Void = ()) -> SettingsListVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingsListVC)
      }

      func userProfileDetailVC(_: Void = ()) -> UserProfileDetailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: userProfileDetailVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic_email_green", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_email_green' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_left_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_left_arrow' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_phone", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_phone' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_user_green", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_user_green' is used in storyboard 'Settings', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "clr_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'clr_bg' is used in storyboard 'Settings', but couldn't be loaded.") }
          if UIKit.UIColor(named: "clr_light_bg", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'clr_light_bg' is used in storyboard 'Settings', but couldn't be loaded.") }
        }
        if _R.storyboard.settings().editProfileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editProfileVC' could not be loaded from storyboard 'Settings' as 'EditProfileVC'.") }
        if _R.storyboard.settings().settingsListVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingsListVC' could not be loaded from storyboard 'Settings' as 'SettingsListVC'.") }
        if _R.storyboard.settings().userProfileDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'userProfileDetailVC' could not be loaded from storyboard 'Settings' as 'UserProfileDetailVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct weather: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Weather"
      let weatherListVC = StoryboardViewControllerResource<WeatherListVC>(identifier: "WeatherListVC")

      func weatherListVC(_: Void = ()) -> WeatherListVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: weatherListVC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.weather().weatherListVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'weatherListVC' could not be loaded from storyboard 'Weather' as 'WeatherListVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
